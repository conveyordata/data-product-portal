name: Tests
on:
  pull_request:
    branches: ['*']
permissions:
  contents: read

jobs:
  environment:
    name: Setup test environment
    runs-on: ubuntu-latest
    outputs:
      POSTGRES_PASSWORD: ${{ steps.out.outputs.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ steps.out.outputs.POSTGRES_USER }}
      POSTGRES_DB: ${{ steps.out.outputs.POSTGRES_DB }}
      POSTGRES_PORT: ${{ steps.out.outputs.POSTGRES_PORT }}
      POSTGRES_SERVER: ${{ steps.out.outputs.POSTGRES_SERVER }}
    steps:
      - name: Checkout github repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set test environment variables as outputs
        id: out
        working-directory: ./backend
        run: cat .test.env >> $GITHUB_OUTPUT

  test:
    name: Run backend tests
    runs-on: ubuntu-latest
    needs: [environment]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ needs.environment.outputs.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ needs.environment.outputs.POSTGRES_PORT }}
          POSTGRES_SERVER: ${{ needs.environment.outputs.POSTGRES_SERVER }}
          POSTGRES_DB: ${{ needs.environment.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ needs.environment.outputs.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 25
        ports:
          - ${{ needs.environment.outputs.POSTGRES_PORT }}:5432
    steps:
      - name: Checkout github repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.13"

      - name: Run image
        uses: abatilo/actions-poetry@65c61eae400c65c9510a584af85138c1ae19bbc0 # v3.0.2
        with:
          poetry-version: "2.1.4"

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --with test

      - name: Run the automated tests
        working-directory: ./backend
        id: run-test
        run: poetry run pytest -v --cov=app --cov-report=term --cov-report=xml tests/

      - name: Ensure 100% coverage for router files
        working-directory: ./scripts
        run: ./check_coverage.sh


  lint-golang:
    name: Run Go linters
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: read  # for golangci/golangci-lint-action to fetch pull requests
    if: ${{ github.actor != 'dependabot[bot]' || contains(github.head_ref, 'dependabot/go_modules')}}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: cli/go.mod
          cache-dependency-path: cli/go.sum
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          args: --timeout 15m0s
          working-directory: cli

  pre-commit:
    name: Run pre-commit hooks
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - name: Setup Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: "3.13"
    - name: Setup Node.js
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version-file: frontend/package.json
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install npm dependencies
      working-directory: frontend
      run: npm ci --ignore-scripts --legacy-peer-deps
    - name: Run pre-commit
      uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
