name: Tests
on:
  pull_request:
    branches: '*'
jobs:
  environment:
    runs-on: ubuntu-latest
    outputs:
      POSTGRES_PASSWORD: ${{ steps.out.outputs.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ steps.out.outputs.POSTGRES_USER }}
      POSTGRES_DB: ${{ steps.out.outputs.POSTGRES_DB }}
      POSTGRES_PORT: ${{ steps.out.outputs.POSTGRES_PORT }}
      POSTGRES_SERVER: ${{ steps.out.outputs.POSTGRES_SERVER }}
    steps:
      - name: Checkout github repository
        uses: actions/checkout@v4
      - name: Set test environment variables as outputs
        id: out
        working-directory: ./backend
        run: cat .test.env >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [environment]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ needs.environment.outputs.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ needs.environment.outputs.POSTGRES_PORT }}
          POSTGRES_SERVER: ${{ needs.environment.outputs.POSTGRES_SERVER }}
          POSTGRES_DB: ${{ needs.environment.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ needs.environment.outputs.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 25
        ports:
          - ${{ needs.environment.outputs.POSTGRES_PORT }}:5432
    steps:
      - name: Checkout github repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.8.2"

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install

      - name: Run the automated tests
        working-directory: ./backend
        run: poetry run pytest -v

  lint-golang:
    name: Run Go linters
    if: ${{ github.actor != 'dependabot[bot]' || contains(github.head_ref, 'dependabot/go_modules')}}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: cli/go.mod
          cache: false
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          args: --timeout 15m0s
          working-directory: cli

