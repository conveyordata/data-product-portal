name: Release workflow

on:
  push:
    tags:
      - '*'

permissions:
  id-token: write
  contents: read

jobs:
  prep-version:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce" # v1.4.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Set new version env
        env:
           TAG: ${{ steps.previoustag.outputs.tag }}
        run: |
          echo "TAG=${TAG#v}" >> $GITHUB_ENV
          echo "APP_VERSION=$(cat VERSION)" >> $GITHUB_ENV
      - name: Check Version Update
        id: versionupdate
        if: ${{ env.TAG != env.APP_VERSION }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
              core.setFailed('VERSION is not the latest tag, did you do a version bump?')
    outputs:
      version: ${{ env.APP_VERSION }}
  helm:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [ "prep-version" ]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.BUILDACCOUNTID }}:role/portal_github_actions
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: ${{ secrets.PUBLICAWSACCOUNTID }}
          registry-type: public
          mask-password: "true"
      - name: Publish Helm package
        uses: WyriHaximus/github-action-helm3@e3894d973c282349e3d41d3347767f2b2545b583 # v4.0.2
        env:
          VERSION: ${{ needs.prep-version.outputs.version }}
        with:
          exec: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm package --dependency-update helm
            helm push data-product-portal-$VERSION.tgz oci://public.ecr.aws/conveyordata
  backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: ["prep-version"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.BUILDACCOUNTID }}:role/portal_github_actions
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: ${{ secrets.PUBLICAWSACCOUNTID }}
          registry-type: public
          mask-password: "true"
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: public.ecr.aws/conveyordata
          ECR_REPOSITORY: data-product-portal/backend
          IMAGE_TAG: ${{ needs.prep-version.outputs.version }}
        run: |
          docker build ./backend -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  frontend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: ["prep-version"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.BUILDACCOUNTID }}:role/portal_github_actions
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: ${{ secrets.PUBLICAWSACCOUNTID }}
          registry-type: public
          mask-password: "true"
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: public.ecr.aws/conveyordata
          ECR_REPOSITORY: data-product-portal/frontend
          IMAGE_TAG: ${{ needs.prep-version.outputs.version }}
        run: |
          docker build ./frontend -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  cli:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    needs: [ "prep-version" ]
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: cli/go.mod
          cache-dependency-path: cli/go.sum
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
          workdir: cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload assets
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: Data product portal CLI
          path: dist/*
  release-docs:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::553817834567:role/github-actions-docs
          role-session-name: GithubActions
          aws-region: eu-west-1
      - name: Install AWS CLI v2
        uses: unfor19/install-aws-cli-action@v1
        with:
          arch: amd64
      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903
        with:
          node-version-file: docs/package.json
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json
      - name: Install npm dependencies
        working-directory: docs
        run: npm ci --ignore-scripts --legacy-peer-deps
      - name: Release portal docs
        working-directory: docs
        run: |
          npm run build
          aws s3 cp build/ s3://data-product-portal-user-docs-tfhgye/ --recursive
