"""Refactored business area to domain

Revision ID: d98efbda5e7c
Revises: 33e853485942
Create Date: 2025-02-26 11:59:42.656312

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d98efbda5e7c"
down_revision: Union[str, None] = "33e853485942"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("device_flows")
    op.drop_table("tags_data_outputs")
    op.drop_table("env_platform_configs")
    op.drop_table("datasets")
    op.drop_table("data_outputs_datasets")
    op.drop_table("platform_service_configs")
    op.drop_table("data_products_settings_values")
    op.drop_table("users")
    op.drop_table("data_products_datasets")
    op.drop_table("data_product_types")
    op.drop_table("domains")
    op.drop_table("data_outputs")
    op.drop_table("tags_data_products")
    op.drop_table("data_output_configurations")
    op.drop_table("datasets_owners")
    op.drop_table("data_products")
    op.drop_table("data_product_lifecycles")
    op.drop_table("tags")
    op.drop_table("env_platform_service_configs")
    op.drop_table("data_product_memberships")
    op.drop_table("tags_datasets")
    op.drop_table("environments")
    op.drop_table("data_product_settings")
    op.alter_column(
        "platform_services", "name", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "platform_services", "platform_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column("platforms", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_constraint("platforms_name_key", "platforms", type_="unique")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint("platforms_name_key", "platforms", ["name"])
    op.alter_column("platforms", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "platform_services", "platform_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column(
        "platform_services", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.create_table(
        "data_product_settings",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("tooltip", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("default", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("order", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("scope", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="data_product_settings_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "environments",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_default", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("context", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="environments_pkey"),
        sa.UniqueConstraint("name", name="uq_environments_name"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tags_datasets",
        sa.Column("dataset_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("tag_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["datasets.id"], name="tags_datasets_dataset_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tags.id"], name="tags_datasets_tag_id_fkey"
        ),
        sa.PrimaryKeyConstraint("tag_id", "dataset_id", name="pk_tags_datasets"),
    )
    op.create_table(
        "data_product_memberships",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("data_product_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "role",
            postgresql.ENUM("OWNER", "MEMBER", name="dataproductuserrole"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "APPROVED",
                "PENDING_APPROVAL",
                "DENIED",
                name="dataproductmembershipstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("requested_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "requested_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("approved_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "approved_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("denied_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "denied_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["approved_by_id"],
            ["users.id"],
            name="data_product_memberships_approved_by_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["data_product_id"],
            ["data_products.id"],
            name="data_product_memberships_data_product_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["denied_by_id"],
            ["users.id"],
            name="data_product_memberships_denied_by_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["requested_by_id"],
            ["users.id"],
            name="data_product_memberships_requested_by_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="data_product_memberships_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="data_product_memberships_pkey"),
    )
    op.create_table(
        "env_platform_service_configs",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("platform_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("service_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("config", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("environment_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["environment_id"],
            ["environments.id"],
            name="env_platform_service_configs_environment_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["platforms.id"],
            name="env_platform_service_configs_platform_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["platform_services.id"],
            name="env_platform_service_configs_service_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="env_platform_service_configs_pkey"),
        sa.UniqueConstraint(
            "environment_id",
            "platform_id",
            "service_id",
            "deleted_at",
            name="uq_env_platform_service",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_table(
        "tags",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("value", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="tags_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "data_product_lifecycles",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("value", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("color", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "is_default",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="data_product_lifecycles_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "data_products",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("about", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "ACTIVE", "ARCHIVED", name="dataproductstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("type_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("domain_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("lifecycle_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["domain_id"], ["domains.id"], name="data_products_domain_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_id"],
            ["data_product_lifecycles.id"],
            name="data_products_lifecycle_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["type_id"], ["data_product_types.id"], name="data_products_type_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="data_products_pkey"),
        sa.UniqueConstraint(
            "external_id",
            "name",
            name="uq_data_product",
            postgresql_nulls_not_distinct=True,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "datasets_owners",
        sa.Column("dataset_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("users_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["datasets.id"], name="datasets_owners_dataset_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["users_id"], ["users.id"], name="datasets_owners_users_id_fkey"
        ),
    )
    op.create_table(
        "data_output_configurations",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("bucket", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "configuration_type", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("suffix", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("path", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("database", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("database_suffix", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("table", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("database_path", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("table_path", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "bucket_identifier", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("schema", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("schema_suffix", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("schema_path", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("catalog", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("catalog_path", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="data_output_configurations_pkey"),
    )
    op.create_table(
        "tags_data_products",
        sa.Column("data_product_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("tag_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["data_product_id"],
            ["data_products.id"],
            name="tags_data_products_data_product_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tags.id"], name="tags_data_products_tag_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "tag_id", "data_product_id", name="pk_tags_data_products"
        ),
    )
    op.create_table(
        "data_outputs",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "ACTIVE", "ARCHIVED", name="dataoutputstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("platform_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("service_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("configuration", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("configuration_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("sourceAligned", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["data_products.id"], name="data_outputs_owner_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["platform_id"], ["platforms.id"], name="data_outputs_platform_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["platform_services.id"],
            name="data_outputs_service_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="data_outputs_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "domains",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="domains_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "data_product_types",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "icon_key",
            postgresql.ENUM(
                "REPORTING",
                "PROCESSING",
                "EXPLORATION",
                "INGESTION",
                "MACHINE_LEARNING",
                "ANALYTICS",
                "DEFAULT",
                name="dataproducticonkey",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="data_product_types_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "data_products_datasets",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("data_product_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("dataset_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING_APPROVAL",
                "APPROVED",
                "DENIED",
                name="dataproductdatasetlinkstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("requested_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "requested_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("approved_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "approved_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("denied_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "denied_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["data_product_id"],
            ["data_products.id"],
            name="data_products_datasets_data_product_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
            name="data_products_datasets_dataset_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="data_products_datasets_pkey"),
    )
    op.create_table(
        "users",
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "is_admin",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_key"),
    )
    op.create_table(
        "data_products_settings_values",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("data_product_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "data_product_setting_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column("value", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("dataset_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["data_product_id"],
            ["data_products.id"],
            name="data_products_settings_values_data_product_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["data_product_setting_id"],
            ["data_product_settings.id"],
            name="data_products_settings_values_data_product_setting_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
            name="data_products_settings_values_dataset_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="data_products_settings_values_pkey"),
    )
    op.create_table(
        "platform_service_configs",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("platform_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("service_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("config", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["platforms.id"],
            name="platform_service_configs_platform_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["platform_services.id"],
            name="platform_service_configs_service_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="platform_service_configs_pkey"),
        sa.UniqueConstraint(
            "platform_id",
            "service_id",
            "deleted_at",
            name="uq_platform_service",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_table(
        "data_outputs_datasets",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("data_output_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("dataset_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING_APPROVAL",
                "APPROVED",
                "DENIED",
                name="dataoutputdatasetlinkstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("requested_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "requested_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("approved_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "approved_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("denied_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "denied_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["data_output_id"],
            ["data_outputs.id"],
            name="data_outputs_datasets_data_output_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
            name="data_outputs_datasets_dataset_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="data_outputs_datasets_pkey"),
    )
    op.create_table(
        "datasets",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("about", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "ACTIVE", "ARCHIVED", name="datasetstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "access_type",
            postgresql.ENUM("PUBLIC", "RESTRICTED", name="datasetaccesstype"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("domain_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("lifecycle_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["domain_id"], ["domains.id"], name="datasets_domain_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_id"],
            ["data_product_lifecycles.id"],
            name="datasets_lifecycle_id_fkey",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="datasets_pkey"),
        sa.UniqueConstraint(
            "external_id", "name", name="uq_dataset", postgresql_nulls_not_distinct=True
        ),
    )
    op.create_table(
        "env_platform_configs",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("environment_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("platform_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("config", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["environment_id"],
            ["environments.id"],
            name="env_platform_configs_environment_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["platforms.id"],
            name="env_platform_configs_platform_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="env_platform_configs_pkey"),
    )
    op.create_table(
        "tags_data_outputs",
        sa.Column("data_output_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("tag_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["data_output_id"],
            ["data_outputs.id"],
            name="tags_data_outputs_data_output_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tags.id"], name="tags_data_outputs_tag_id_fkey"
        ),
    )
    op.create_table(
        "device_flows",
        sa.Column("device_code", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_code", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("scope", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("interval", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("expiration", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "AUTHORIZATION_PENDING",
                "EXPIRED",
                "DENIED",
                "AUTHORIZED",
                name="deviceflowstatus",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("client_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "max_expiry", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "last_checked",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "oidc_redirect_uri", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("authz_code", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("authz_verif", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("authz_state", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("device_code", name="device_flows_pkey"),
    )
    # ### end Alembic commands ###
